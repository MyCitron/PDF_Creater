#!/usr/bin/python
# -*-coding:utf-8-*-
# Author:Citron
'''
       Used to save objects generated by parsing XML files

'''
import copy
import tools

# single text text
class pdf_char:
    def __init__(self, point, text, size):
        self.point = point
        self.size = int(size)
        self.text = text


# single line text
class pdf_char_line(list):
    '''
       存储字体大小、字间距相差不大并且连载一起的对象。用于连续的绘画文字
    '''

    def __init__(self, line_point, char_space):
        self.init(line_point, char_space)

    def __init__(self, line_point,char_space=0):
        self.init(line_point,char_space)

    def init(self,line_point,char_space):
        list.__init__([])
        self.line_point = line_point
        self.char_space = char_space
        self.char_size=0
        self.char_line=''

# struct point
class point:
    def __init__(self, top, bottom, left, right):
        self.top = int(top)
        self.bottom = int(bottom)
        self.left = int(left)
        self.right = int(right)
        self.max=max(self.bottom-self.top,self.right-self.left)


# block和pdf_char_line的区别在于，一行（block)可能包含多个行文本（char_line）
class block:
    """
        用于整理区分出一个块中包含多少个行文本，以及计算这个行文本的平均字间距、字体大小等
        block_list:存放划分完成的char_line的对象
     """

    def __init__(self, line_list):
        '''
         :param line_list: 解析xml中line节点得到的原始line
         '''
        self.block_list = []
        self.line_list = line_list
        self.split_block()

    def split_block(self):
        block = self.init_block(0)
        for index in range(1, len(self.line_list)):
            # 如果相邻两个汉字的字间距小于这个字的大小，则认为这个字是同一个块
            if ((self.line_list[index].point.left - self.line_list[index - 1].point.right) < self.line_list[
                index].size):
                block.append(self.line_list[index])
                block.char_line+=self.line_list[index].text
            else:
                self.add_to_block_list(block)
                block = self.init_block(0)
        self.add_to_block_list(block)

    def add_to_block_list(self,block):
        char_size = self.get_char_size(block)
        dis_argv = self.get_char_space_by_total(block, char_size)
        block.char_size=char_size
        block.char_space=dis_argv
        block.line_point=block[0].point
        self.block_list.append(copy.deepcopy(block))

    def init_block(self, list_index):
        block = pdf_char_line(self.line_list[list_index].point)
        block.append(self.line_list[list_index])
        block.char_line += self.line_list[list_index].text
        return block

    # 计算字间距
    # 第一种方法：每个字间距的平均数
    def get_char_space_by_each(self, block):
        if (len(block) < 2): return 0
        list_distant = []
        for index in range(1, len(block)):
            #标点符号不做处理
            if(tools.is_punctuation(block[index].text)):continue
            if(tools.is_punctuation(block[index].text)):continue
            distant = block[index].point.left - block[index - 1].point.right
            list_distant.append(distant)
        return tools.get_average(list_distant)

    # 计算字间距
    # 第二种方法:(总长度-字所占长度)/字间距
    def get_char_space_by_total(self,block,size):
        block_len=len(block)
        if (block_len < 1): return 0
        block_distance=block[block_len-1].point.right-block[0].point.left
        return int((block_distance-block_len*size)/block_len)

    # 计算所有字体大小的平均数
    # 字体大小取Max(r-l,b-t)
    def get_char_size(self,block):
        if(len(block)<1):return 0
        list_size=[]
        for char in block:
            if(tools.is_punctuation(char.text)):continue
            list_size.append(char.point.max)
        return tools.get_average(list_size)

