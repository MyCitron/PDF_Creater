#!/usr/bin/python
# -*-coding:utf-8-*-
# Author:Citron
'''
       Used to save objects generated by parsing XML files

'''
import copy
import tools
import define

# single text text
class pdf_char:
    def __init__(self, point, text, size):
        self.point = point
        self.size = int(size)
        self.text = text


# single line text
class pdf_char_line(list):
    '''
       存储字体大小、字间距相差不大并且连载一起的对象。用于连续的绘画文字
    '''
    def __init__(self, line_point, char_space):
        self.init(line_point, char_space)

    def __init__(self, line_point,char_space=0):
        self.init(line_point,char_space)

    def init(self,line_point,char_space):
        list.__init__([])
        self.line_point = line_point
        self.char_space = char_space
        self.char_size=0
        self.char_line=''
        self.last_point=0
        self.property=''


# struct point
class point:
    def __init__(self, top, bottom, left, right):
        self.top = int(top)
        self.bottom = int(bottom)
        self.left = int(left)
        self.right = int(right)
        self.max=max(self.bottom-self.top,self.right-self.left)


# block和pdf_char_line的区别在于，一行（block)可能包含多个行文本（char_line）
class block:
    """
        用于整理区分出一个块中包含多少个行文本，以及计算这个行文本的平均字间距、字体大小等
        block_list:存放划分完成的char_line的对象
     """

    def __init__(self, line_list):
        '''
         :param line_list: 解析xml中line节点得到的原始line
         '''
        self.block_list = []
        self.line_list = line_list
        self.split_block()

    def split_block(self):
        is_block_begin=True
        last_is_digit=False
        for index in range(0, len(self.line_list)):
            if(tools.is_digit(self.line_list[index].text)):
               if not is_block_begin:
                   self.add_to_block_list(block)
                   is_block_begin = True
               if not last_is_digit:
                   block = self.init_block(index)
               else:
                   block.append(self.line_list[index])
                   block.char_line += self.line_list[index].text
               last_is_digit=True
               continue
            else:
                if last_is_digit:
                    block.property="digit"
                    self.add_to_block_list(block)
                    is_block_begin = True
                last_is_digit=False

            # 初始化block
            if (is_block_begin):
                block = self.init_block(index)
                is_block_begin = False
            # 处理标点符号
            elif(tools.is_punctuation(self.line_list[index].text) ):
                block.append(self.line_list[index])
                block.char_line += self.line_list[index].text
                self.add_to_block_list(block)
                is_block_begin = True
            # 如果相邻两个汉字的字间距小于这个字的大小，则认为这个字是同一个块
            elif((block[len(block)-1].point.left - self.line_list[index - 1].point.right) < self.line_list[
                index].size):
                block.append(self.line_list[index])
                block.char_line+=self.line_list[index].text
            else:
                self.add_to_block_list(block)
                is_block_begin=True
        self.add_to_block_list(block)



    #def split_kind_block(self,block):


    #计算block的各种信息
    def add_to_block_list(self,block):
        char_size = self.get_char_size(block)
        block.char_size=char_size
        block.last_point=self.get_block_last_point(block)
        block.line_point = point(block[0].point.top,self.get_block_bottom(block), block[0].point.left, block[0].point.right)

        block.line_point.max=self.get_block_argv_max(block)
        self.block_list.append(copy.deepcopy(block))

    def init_block(self, list_index):
        block = pdf_char_line(self.line_list[list_index].point)
        block.append(self.line_list[list_index])
        block.char_line= self.line_list[list_index].text
        return block

    # 计算字体大小
    # 字体大小取Max(r-l,b-t)
    def get_char_size(self,block):
        if(len(block)<1):return 0
        list_size=[]
        for char in block:

            if(tools.is_punctuation(char.text)):
                continue
            #ABBYY的字体大小计算不准确
            list_size.append(char.point.max)
            print(char.text, str(char.point.bottom - char.point.top), str(char.point.right - char.point.left),
                  str(char.size))
        if(len(list_size)==0):
            return  block[0].size
        print(tools.get_average(list_size))
        return tools.get_average(list_size)

    #计算平均坐标
    def get_block_bottom(self, block):
        list_bottom=[]
        for char in block:
            if (tools.is_punctuation(char.text)):
                list_bottom.append(char.point.top)
            else:
                list_bottom.append(char.point.bottom+(char.point.max-(char.point.bottom-char.point.top))/2)

        return  tools.get_average(list_bottom)

    def get_block_last_point(self,block):
        length=len(block)
        if(tools.is_punctuation(block[length-1].text)or tools.is_digit(block[length-1].text)):
           return block[length-1].point.left+block.char_size
        else:
          return block[length-1].point.right


    def get_block_argv_max(self,block):
        list_bottom = []
        for char in block:
           list_bottom.append(char.point.max)
        return tools.get_average(list_bottom)

